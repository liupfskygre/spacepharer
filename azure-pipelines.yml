# https://aka.ms/yaml

trigger:
  - master

variables:
    regression: 1

jobs:
  - job: build_ubuntu_1604
    displayName: Ubuntu 1604
    pool:
      vmImage: 'Ubuntu-16.04'

    strategy:
      matrix:
        avx2:
          SIMD: 'AVX2'
          STATIC: 1
          MPI: 0
        sse:
          SIMD: 'SSE4_1'
          STATIC: 1
          MPI: 0
        avx2_mpi:
          SIMD: 'AVX2'
          STATIC: 0
          MPI: 1

    steps:
      - checkout: self
      - script: |
          sudo apt-get update
          sudo apt-get -y install mpi-default-dev mpi-default-bin
        displayName: Install Dependencies
        condition: eq(variables['MPI'], 1)
      - script: |
          mkdir build && cd build
          if [ "${STATIC}" -eq "1" ]; then
              cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=OFF \
                -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc \
                -static-libstdc++" -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
                -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 -DHAVE_MPI=${MPI} ..
          else
              cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 -DHAVE_MPI=${MPI} ..
          fi

          make -j $(nproc --all)
        displayName: Build SpacePHARER
        - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          ./build/src/spacepharer createsetdb examples/GCA*.fna.gz targets tmpFolder
          ./build/src/spacepharer createsetdb examples/GCA*.fna.gz targets_rev tmpFolder --reverse-fragments 1
          ./build/src/spacepharer easy-predict examples/*.fas targets result.tsv tmp
          awk '/^>/ && $3 < 1E-03 { cnt++; } END { if (cnt != 7) exit 1; }' result.tsv
        displayName: Run Regression Suite
        condition: eq(variables['regression'], 1)
      - task: PublishPipelineArtifact@0
        condition: eq(variables['STATIC'], 1)
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/src/spacepharer
          artifactName: spacepharer-linux-$(SIMD)

  - job: build_macos_1014
    displayName: macOS 1014
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: self
      - script: |
          brew install cmake libomp zlib bzip2 coreutils
        displayName: Install Dependencies
      - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          ./lib/mmseqs/util/build_osx.sh . build spacepharer
        displayName: Build SpacePHARER
      - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          ./build/src/spacepharer createsetdb examples/GCA*.fna.gz targets tmpFolder
          ./build/src/spacepharer createsetdb examples/GCA*.fna.gz targets_rev tmpFolder --reverse-fragments 1
          ./build/src/spacepharer easy-predict examples/*.fas targets result.tsv tmp
          awk '/^>/ && $3 < 1E-03 { cnt++; } END { if (cnt != 7) exit 1; }' result.tsv
        displayName: Run Regression Suite
        condition: eq(variables['regression'], 1)
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/build_sse41/src/spacepharer
          artifactName: spacepharer-darwin-sse41
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/build_avx2/src/spacepharer
          artifactName: spacepharer-darwin-avx2

  # - job: build_windows_2019
  #   displayName: Windows 2019
  #   pool:
  #     vmImage: 'windows-2019'
  #   variables:
  #     CYGWIN_ROOT: $(System.Workfolder)\cygwin
  #     CYGWIN_MIRROR: http://cygwin.mirror.constant.com
  #   timeoutInMinutes: 120
  #   steps:
  #     - powershell: git config --global core.autocrlf false
  #       displayName: core.autocrlf false
  #       submodules: true
  #     - script: |
  #         choco install cygwin --params="/InstallDir:%CYGWIN_ROOT%"
  #       displayName: Install Cygwin
  #     - script: |
  #         %CYGWIN_ROOT%\cygwinsetup.exe -qnNdO -R "%CYGWIN_ROOT%" -s "%CYGWIN_MIRROR%" -g -P ^
  #         bash,^
  #         xxd,^
  #         cmake,^
  #         make,^
  #         gcc-core,^
  #         gcc-g++,^
  #         zlib-devel,^
  #         libbz2-devel,^
  #         busybox-standalone,^
  #         git,^
  #         binutils,^
  #         wget,^
  #         perl
  #       displayName: Install Dependencies
  #     - script: |
  #         %CYGWIN_ROOT%\bin\bash.exe -cl "${BUILD_SOURCESDIRECTORY}/lib/mmseqs/util/build_windows.sh $(cygpath ${BUILD_SOURCESDIRECTORY}) $(cygpath ${BUILD_SOURCESDIRECTORY}/build) spacepharer"
  #       displayName: Build SpacePHARER
  #     - task: "ArchiveFiles@2"
  #       inputs:
  #         rootFolderOrFile: $(Build.SourcesDirectory)\build\spacepharer
  #         archiveFile: $(Build.SourcesDirectory)\spacepharer-win64.zip
  #         includeRootFolder: true
  #         archiveType: zip
  #     - task: PublishPipelineArtifact@0
  #       inputs:
  #         targetPath: $(Build.SourcesDirectory)\spacepharer-win64.zip
  #         artifactName: spacepharer-win64
  #     - script: |
  #         %BUILD_SOURCESDIRECTORY%\build\spacepharer\spacepharer.bat version
  #       displayName: Setup Busybox
  #     - script: |
  #         %CYGWIN_ROOT%\bin\bash.exe -cl "cd ${BUILD_SOURCESDIRECTORY}/tests && ./run.sh $(cygpath ${BUILD_SOURCESDIRECTORY}/build/spacepharer/bin/spacepharer.exe)"
  #       displayName: Run Regression Suite
  #       condition: eq(variables['regression'], 1)

  - job: upload_artifacts
    displayName: Upload Artifacts
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    pool:
      vmImage: 'Ubuntu-16.04'
    dependsOn:
      - build_macos_1014
      - build_ubuntu_1604
      # - build_windows_2019
    steps:
      - script: |
          cd "${BUILD_SOURCESDIRECTORY}"
          mkdir spacepharer
          cp -f README.md LICENCE.md spacepharer
          mkdir spacepharer/bin
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: spacepharer-darwin-sse41
          targetPath: $(Build.SourcesDirectory)/spacepharer/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/spacepharer/bin/spacepharer"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/spacepharer
          archiveFile: $(Build.SourcesDirectory)/spacepharer-osx-sse41.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: spacepharer-darwin-avx2
          targetPath: $(Build.SourcesDirectory)/spacepharer/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/spacepharer/bin/spacepharer"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/spacepharer
          archiveFile: $(Build.SourcesDirectory)/spacepharer-osx-avx2.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: spacepharer-linux-SSE4_1
          targetPath: $(Build.SourcesDirectory)/spacepharer/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/spacepharer/bin/spacepharer"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/spacepharer
          archiveFile: $(Build.SourcesDirectory)/spacepharer-linux-sse41.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: spacepharer-linux-AVX2
          targetPath: $(Build.SourcesDirectory)/spacepharer/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/spacepharer/bin/spacepharer"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/spacepharer
          archiveFile: $(Build.SourcesDirectory)/spacepharer-linux-avx2.tar.gz
          includeRootFolder: true
          archiveType: tar
      - script:
          rm "${BUILD_SOURCESDIRECTORY}/spacepharer/bin/spacepharer"
      # - task: DownloadPipelineArtifact@1
      #   inputs:
      #     artifactName: spacepharer-win64
      #     targetPath: $(Build.SourcesDirectory)
      # - script: |
      #     unzip "${BUILD_SOURCESDIRECTORY}/spacepharer-win64.zip"
      #     chmod +x spacepharer/spacepharer.bat spacepharer/bin/*
      # - task: ArchiveFiles@2
      #   inputs:
      #     rootFolderOrFile: $(Build.SourcesDirectory)/spacepharer
      #     archiveFile: $(Build.SourcesDirectory)/spacepharer-win64.zip
      #     includeRootFolder: true
      #     archiveType: zip
      - task: DownloadSecureFile@1
        inputs:
          secureFile: azure_upload_spacepharer
        displayName: Get Deployment Key
      - script: |
          mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
          chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa uniclust.mmseqs.com >> ~/.ssh/known_hosts
          cd "${BUILD_SOURCESDIRECTORY}"
          ssh codeship@uniclust.mmseqs.com "mkdir -p \"/home/mirdita/repositories/mmseqs-webserver/archive/${BUILD_SOURCEVERSION}\""
          scp spacepharer-osx-avx2.tar.gz spacepharer-linux-sse41.tar.gz spacepharer-linux-avx2.tar.gz codeship@uniclust.mmseqs.com:"/home/mirdita/repositories/mmseqs-webserver/archive/${BUILD_SOURCEVERSION}"
          ssh codeship@uniclust.mmseqs.com "update-latest-spacepharer.sh \"${BUILD_SOURCEVERSION}\""
